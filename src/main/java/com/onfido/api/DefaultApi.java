/*
 * Onfido API
 * The Onfido API is used to submit check requests.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.api;

import com.onfido.ApiCallback;
import com.onfido.ApiClient;
import com.onfido.ApiException;
import com.onfido.ApiResponse;
import com.onfido.Configuration;
import com.onfido.Pair;
import com.onfido.ProgressRequestBody;
import com.onfido.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onfido.models.AddressesList;
import com.onfido.models.Applicant;
import com.onfido.models.ApplicantsList;
import com.onfido.models.Check;
import com.onfido.models.ChecksList;
import com.onfido.models.Document;
import com.onfido.models.DocumentsList;
import com.onfido.models.Error;
import java.io.File;
import com.onfido.models.LivePhoto;
import com.onfido.models.LivePhotosList;
import com.onfido.models.LiveVideo;
import com.onfido.models.LiveVideosList;
import com.onfido.models.Report;
import com.onfido.models.ReportsList;
import com.onfido.models.SdkToken;
import com.onfido.models.Webhook;
import com.onfido.models.WebhooksList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelReport
     * @param reportId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call cancelReportCall(String reportId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/reports/{report_id}/cancel"
            .replaceAll("\\{" + "report_id" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelReportValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling cancelReport(Async)");
        }
        

        okhttp3.Call localVarCall = cancelReportCall(reportId, _callback);
        return localVarCall;

    }

    /**
     * This endpoint is for cancelling individual paused reports.
     * 
     * @param reportId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelReport(String reportId) throws ApiException {
        cancelReportWithHttpInfo(reportId);
    }

    /**
     * This endpoint is for cancelling individual paused reports.
     * 
     * @param reportId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelReportWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = cancelReportValidateBeforeCall(reportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This endpoint is for cancelling individual paused reports. (asynchronously)
     * 
     * @param reportId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call cancelReportAsync(String reportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelReportValidateBeforeCall(reportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApplicant
     * @param applicant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createApplicantCall(Applicant applicant, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicant;

        // create path and map variables
        String localVarPath = "/applicants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicantValidateBeforeCall(Applicant applicant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicant' is set
        if (applicant == null) {
            throw new ApiException("Missing the required parameter 'applicant' when calling createApplicant(Async)");
        }
        

        okhttp3.Call localVarCall = createApplicantCall(applicant, _callback);
        return localVarCall;

    }

    /**
     * Create Applicant
     * 
     * @param applicant  (required)
     * @return Applicant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Applicant createApplicant(Applicant applicant) throws ApiException {
        ApiResponse<Applicant> localVarResp = createApplicantWithHttpInfo(applicant);
        return localVarResp.getData();
    }

    /**
     * Create Applicant
     * 
     * @param applicant  (required)
     * @return ApiResponse&lt;Applicant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Applicant> createApplicantWithHttpInfo(Applicant applicant) throws ApiException {
        okhttp3.Call localVarCall = createApplicantValidateBeforeCall(applicant, null);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Applicant (asynchronously)
     * 
     * @param applicant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createApplicantAsync(Applicant applicant, final ApiCallback<Applicant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicantValidateBeforeCall(applicant, _callback);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCheck
     * @param check  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createCheckCall(Check check, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = check;

        // create path and map variables
        String localVarPath = "/checks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckValidateBeforeCall(Check check, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling createCheck(Async)");
        }
        

        okhttp3.Call localVarCall = createCheckCall(check, _callback);
        return localVarCall;

    }

    /**
     * Create a check
     * 
     * @param check  (required)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Check createCheck(Check check) throws ApiException {
        ApiResponse<Check> localVarResp = createCheckWithHttpInfo(check);
        return localVarResp.getData();
    }

    /**
     * Create a check
     * 
     * @param check  (required)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Check> createCheckWithHttpInfo(Check check) throws ApiException {
        okhttp3.Call localVarCall = createCheckValidateBeforeCall(check, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a check (asynchronously)
     * 
     * @param check  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createCheckAsync(Check check, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckValidateBeforeCall(check, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebhook
     * @param webhook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createWebhookCall(Webhook webhook, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(Webhook webhook, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling createWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = createWebhookCall(webhook, _callback);
        return localVarCall;

    }

    /**
     * Create a webhook
     * 
     * @param webhook  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Webhook createWebhook(Webhook webhook) throws ApiException {
        ApiResponse<Webhook> localVarResp = createWebhookWithHttpInfo(webhook);
        return localVarResp.getData();
    }

    /**
     * Create a webhook
     * 
     * @param webhook  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Webhook> createWebhookWithHttpInfo(Webhook webhook) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhook, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook (asynchronously)
     * 
     * @param webhook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createWebhookAsync(Webhook webhook, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhook, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhook
     * @param webhookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteWebhookCall(String webhookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replaceAll("\\{" + "webhook_id" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWebhookCall(webhookId, _callback);
        return localVarCall;

    }

    /**
     * Delete a webhook
     * 
     * @param webhookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebhook(String webhookId) throws ApiException {
        deleteWebhookWithHttpInfo(webhookId);
    }

    /**
     * Delete a webhook
     * 
     * @param webhookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a webhook (asynchronously)
     * 
     * @param webhookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteWebhookAsync(String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyApplicant
     * @param applicantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call destroyApplicantCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/applicants/{applicant_id}"
            .replaceAll("\\{" + "applicant_id" + "\\}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyApplicantValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling destroyApplicant(Async)");
        }
        

        okhttp3.Call localVarCall = destroyApplicantCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * Delete Applicant
     * 
     * @param applicantId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyApplicant(String applicantId) throws ApiException {
        destroyApplicantWithHttpInfo(applicantId);
    }

    /**
     * Delete Applicant
     * 
     * @param applicantId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyApplicantWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = destroyApplicantValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Applicant (asynchronously)
     * 
     * @param applicantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call destroyApplicantAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyApplicantValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadDocument
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call downloadDocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/documents/{document_id}/download"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadDocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadDocument(Async)");
        }
        

        okhttp3.Call localVarCall = downloadDocumentCall(documentId, _callback);
        return localVarCall;

    }

    /**
     * Download a documents raw data
     * 
     * @param documentId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadDocument(String documentId) throws ApiException {
        ApiResponse<File> localVarResp = downloadDocumentWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Download a documents raw data
     * 
     * @param documentId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadDocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadDocumentValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a documents raw data (asynchronously)
     * 
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call downloadDocumentAsync(String documentId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadDocumentValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadLivePhoto
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call downloadLivePhotoCall(String livePhotoId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_photos/{live_photo_id}/download"
            .replaceAll("\\{" + "live_photo_id" + "\\}", localVarApiClient.escapeString(livePhotoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLivePhotoValidateBeforeCall(String livePhotoId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'livePhotoId' is set
        if (livePhotoId == null) {
            throw new ApiException("Missing the required parameter 'livePhotoId' when calling downloadLivePhoto(Async)");
        }
        

        okhttp3.Call localVarCall = downloadLivePhotoCall(livePhotoId, _callback);
        return localVarCall;

    }

    /**
     * Download live photo
     * Live photos are downloaded using this endpoint.
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadLivePhoto(String livePhotoId) throws ApiException {
        ApiResponse<File> localVarResp = downloadLivePhotoWithHttpInfo(livePhotoId);
        return localVarResp.getData();
    }

    /**
     * Download live photo
     * Live photos are downloaded using this endpoint.
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadLivePhotoWithHttpInfo(String livePhotoId) throws ApiException {
        okhttp3.Call localVarCall = downloadLivePhotoValidateBeforeCall(livePhotoId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download live photo (asynchronously)
     * Live photos are downloaded using this endpoint.
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call downloadLivePhotoAsync(String livePhotoId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLivePhotoValidateBeforeCall(livePhotoId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadLiveVideo
     * @param liveVideoId The live video’s unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call downloadLiveVideoCall(String liveVideoId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_videos/{live_video_id}/download"
            .replaceAll("\\{" + "live_video_id" + "\\}", localVarApiClient.escapeString(liveVideoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLiveVideoValidateBeforeCall(String liveVideoId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveVideoId' is set
        if (liveVideoId == null) {
            throw new ApiException("Missing the required parameter 'liveVideoId' when calling downloadLiveVideo(Async)");
        }
        

        okhttp3.Call localVarCall = downloadLiveVideoCall(liveVideoId, _callback);
        return localVarCall;

    }

    /**
     * Download live video
     * Live videos are downloaded using this endpoint.
     * @param liveVideoId The live video’s unique identifier. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadLiveVideo(String liveVideoId) throws ApiException {
        ApiResponse<File> localVarResp = downloadLiveVideoWithHttpInfo(liveVideoId);
        return localVarResp.getData();
    }

    /**
     * Download live video
     * Live videos are downloaded using this endpoint.
     * @param liveVideoId The live video’s unique identifier. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadLiveVideoWithHttpInfo(String liveVideoId) throws ApiException {
        okhttp3.Call localVarCall = downloadLiveVideoValidateBeforeCall(liveVideoId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download live video (asynchronously)
     * Live videos are downloaded using this endpoint.
     * @param liveVideoId The live video’s unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call downloadLiveVideoAsync(String liveVideoId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLiveVideoValidateBeforeCall(liveVideoId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editWebhook
     * @param webhookId  (required)
     * @param webhook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call editWebhookCall(String webhookId, Webhook webhook, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replaceAll("\\{" + "webhook_id" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editWebhookValidateBeforeCall(String webhookId, Webhook webhook, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling editWebhook(Async)");
        }
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling editWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = editWebhookCall(webhookId, webhook, _callback);
        return localVarCall;

    }

    /**
     * Edit a webhook
     * 
     * @param webhookId  (required)
     * @param webhook  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Webhook editWebhook(String webhookId, Webhook webhook) throws ApiException {
        ApiResponse<Webhook> localVarResp = editWebhookWithHttpInfo(webhookId, webhook);
        return localVarResp.getData();
    }

    /**
     * Edit a webhook
     * 
     * @param webhookId  (required)
     * @param webhook  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Webhook> editWebhookWithHttpInfo(String webhookId, Webhook webhook) throws ApiException {
        okhttp3.Call localVarCall = editWebhookValidateBeforeCall(webhookId, webhook, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a webhook (asynchronously)
     * 
     * @param webhookId  (required)
     * @param webhook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call editWebhookAsync(String webhookId, Webhook webhook, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = editWebhookValidateBeforeCall(webhookId, webhook, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAddresses
     * @param postcode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findAddressesCall(String postcode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/addresses/pick";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (postcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postcode", postcode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAddressesValidateBeforeCall(String postcode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'postcode' is set
        if (postcode == null) {
            throw new ApiException("Missing the required parameter 'postcode' when calling findAddresses(Async)");
        }
        

        okhttp3.Call localVarCall = findAddressesCall(postcode, _callback);
        return localVarCall;

    }

    /**
     * Search for addresses by postcode
     * 
     * @param postcode  (required)
     * @return AddressesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressesList findAddresses(String postcode) throws ApiException {
        ApiResponse<AddressesList> localVarResp = findAddressesWithHttpInfo(postcode);
        return localVarResp.getData();
    }

    /**
     * Search for addresses by postcode
     * 
     * @param postcode  (required)
     * @return ApiResponse&lt;AddressesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressesList> findAddressesWithHttpInfo(String postcode) throws ApiException {
        okhttp3.Call localVarCall = findAddressesValidateBeforeCall(postcode, null);
        Type localVarReturnType = new TypeToken<AddressesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for addresses by postcode (asynchronously)
     * 
     * @param postcode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findAddressesAsync(String postcode, final ApiCallback<AddressesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAddressesValidateBeforeCall(postcode, _callback);
        Type localVarReturnType = new TypeToken<AddressesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findApplicant
     * @param applicantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findApplicantCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/applicants/{applicant_id}"
            .replaceAll("\\{" + "applicant_id" + "\\}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findApplicantValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling findApplicant(Async)");
        }
        

        okhttp3.Call localVarCall = findApplicantCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Applicant
     * 
     * @param applicantId  (required)
     * @return Applicant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Applicant findApplicant(String applicantId) throws ApiException {
        ApiResponse<Applicant> localVarResp = findApplicantWithHttpInfo(applicantId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Applicant
     * 
     * @param applicantId  (required)
     * @return ApiResponse&lt;Applicant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Applicant> findApplicantWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = findApplicantValidateBeforeCall(applicantId, null);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Applicant (asynchronously)
     * 
     * @param applicantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findApplicantAsync(String applicantId, final ApiCallback<Applicant> _callback) throws ApiException {

        okhttp3.Call localVarCall = findApplicantValidateBeforeCall(applicantId, _callback);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCheck
     * @param checkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findCheckCall(String checkId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/checks/{check_id}"
            .replaceAll("\\{" + "check_id" + "\\}", localVarApiClient.escapeString(checkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCheckValidateBeforeCall(String checkId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling findCheck(Async)");
        }
        

        okhttp3.Call localVarCall = findCheckCall(checkId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Check
     * 
     * @param checkId  (required)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Check findCheck(String checkId) throws ApiException {
        ApiResponse<Check> localVarResp = findCheckWithHttpInfo(checkId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Check
     * 
     * @param checkId  (required)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Check> findCheckWithHttpInfo(String checkId) throws ApiException {
        okhttp3.Call localVarCall = findCheckValidateBeforeCall(checkId, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Check (asynchronously)
     * 
     * @param checkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findCheckAsync(String checkId, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCheckValidateBeforeCall(checkId, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findDocument
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findDocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/documents/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findDocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling findDocument(Async)");
        }
        

        okhttp3.Call localVarCall = findDocumentCall(documentId, _callback);
        return localVarCall;

    }

    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     * 
     * @param documentId  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document findDocument(String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = findDocumentWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     * 
     * @param documentId  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> findDocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = findDocumentValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier. (asynchronously)
     * 
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findDocumentAsync(String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = findDocumentValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findLivePhoto
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findLivePhotoCall(String livePhotoId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_photos/{live_photo_id}"
            .replaceAll("\\{" + "live_photo_id" + "\\}", localVarApiClient.escapeString(livePhotoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findLivePhotoValidateBeforeCall(String livePhotoId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'livePhotoId' is set
        if (livePhotoId == null) {
            throw new ApiException("Missing the required parameter 'livePhotoId' when calling findLivePhoto(Async)");
        }
        

        okhttp3.Call localVarCall = findLivePhotoCall(livePhotoId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve live photo
     * 
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @return LivePhoto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LivePhoto findLivePhoto(String livePhotoId) throws ApiException {
        ApiResponse<LivePhoto> localVarResp = findLivePhotoWithHttpInfo(livePhotoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve live photo
     * 
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @return ApiResponse&lt;LivePhoto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LivePhoto> findLivePhotoWithHttpInfo(String livePhotoId) throws ApiException {
        okhttp3.Call localVarCall = findLivePhotoValidateBeforeCall(livePhotoId, null);
        Type localVarReturnType = new TypeToken<LivePhoto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve live photo (asynchronously)
     * 
     * @param livePhotoId The live photo’s unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findLivePhotoAsync(String livePhotoId, final ApiCallback<LivePhoto> _callback) throws ApiException {

        okhttp3.Call localVarCall = findLivePhotoValidateBeforeCall(livePhotoId, _callback);
        Type localVarReturnType = new TypeToken<LivePhoto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findLiveVideo
     * @param liveVideoId The live video’s unique identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findLiveVideoCall(String liveVideoId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_videos/{live_video_id}"
            .replaceAll("\\{" + "live_video_id" + "\\}", localVarApiClient.escapeString(liveVideoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findLiveVideoValidateBeforeCall(String liveVideoId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveVideoId' is set
        if (liveVideoId == null) {
            throw new ApiException("Missing the required parameter 'liveVideoId' when calling findLiveVideo(Async)");
        }
        

        okhttp3.Call localVarCall = findLiveVideoCall(liveVideoId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve live video
     * 
     * @param liveVideoId The live video’s unique identifier. (required)
     * @return LiveVideo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveVideo findLiveVideo(String liveVideoId) throws ApiException {
        ApiResponse<LiveVideo> localVarResp = findLiveVideoWithHttpInfo(liveVideoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve live video
     * 
     * @param liveVideoId The live video’s unique identifier. (required)
     * @return ApiResponse&lt;LiveVideo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveVideo> findLiveVideoWithHttpInfo(String liveVideoId) throws ApiException {
        okhttp3.Call localVarCall = findLiveVideoValidateBeforeCall(liveVideoId, null);
        Type localVarReturnType = new TypeToken<LiveVideo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve live video (asynchronously)
     * 
     * @param liveVideoId The live video’s unique identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findLiveVideoAsync(String liveVideoId, final ApiCallback<LiveVideo> _callback) throws ApiException {

        okhttp3.Call localVarCall = findLiveVideoValidateBeforeCall(liveVideoId, _callback);
        Type localVarReturnType = new TypeToken<LiveVideo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findReport
     * @param reportId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findReportCall(String reportId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/reports/{report_id}"
            .replaceAll("\\{" + "report_id" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findReportValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling findReport(Async)");
        }
        

        okhttp3.Call localVarCall = findReportCall(reportId, _callback);
        return localVarCall;

    }

    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     * 
     * @param reportId  (required)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Report findReport(String reportId) throws ApiException {
        ApiResponse<Report> localVarResp = findReportWithHttpInfo(reportId);
        return localVarResp.getData();
    }

    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     * 
     * @param reportId  (required)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Report> findReportWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = findReportValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier. (asynchronously)
     * 
     * @param reportId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findReportAsync(String reportId, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = findReportValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWebhook
     * @param webhookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findWebhookCall(String webhookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replaceAll("\\{" + "webhook_id" + "\\}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWebhookValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling findWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = findWebhookCall(webhookId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Webhook
     * 
     * @param webhookId  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Webhook findWebhook(String webhookId) throws ApiException {
        ApiResponse<Webhook> localVarResp = findWebhookWithHttpInfo(webhookId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Webhook
     * 
     * @param webhookId  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Webhook> findWebhookWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = findWebhookValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Webhook (asynchronously)
     * 
     * @param webhookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findWebhookAsync(String webhookId, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWebhookValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateSdkToken
     * @param sdkToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call generateSdkTokenCall(SdkToken sdkToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sdkToken;

        // create path and map variables
        String localVarPath = "/sdk_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSdkTokenValidateBeforeCall(SdkToken sdkToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sdkToken' is set
        if (sdkToken == null) {
            throw new ApiException("Missing the required parameter 'sdkToken' when calling generateSdkToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateSdkTokenCall(sdkToken, _callback);
        return localVarCall;

    }

    /**
     * Generate a SDK token
     * 
     * @param sdkToken  (required)
     * @return SdkToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SdkToken generateSdkToken(SdkToken sdkToken) throws ApiException {
        ApiResponse<SdkToken> localVarResp = generateSdkTokenWithHttpInfo(sdkToken);
        return localVarResp.getData();
    }

    /**
     * Generate a SDK token
     * 
     * @param sdkToken  (required)
     * @return ApiResponse&lt;SdkToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SdkToken> generateSdkTokenWithHttpInfo(SdkToken sdkToken) throws ApiException {
        okhttp3.Call localVarCall = generateSdkTokenValidateBeforeCall(sdkToken, null);
        Type localVarReturnType = new TypeToken<SdkToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a SDK token (asynchronously)
     * 
     * @param sdkToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call generateSdkTokenAsync(SdkToken sdkToken, final ApiCallback<SdkToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSdkTokenValidateBeforeCall(sdkToken, _callback);
        Type localVarReturnType = new TypeToken<SdkToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApplicants
     * @param page The page to return. The first page is &#x60;page&#x3D;1&#x60; (optional, default to 1)
     * @param perPage The number of objects per page. (optional, default to 20)
     * @param includeDeleted Whether to also include applicants scheduled for deletion. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listApplicantsCall(Integer page, Integer perPage, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/applicants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicantsValidateBeforeCall(Integer page, Integer perPage, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listApplicantsCall(page, perPage, includeDeleted, _callback);
        return localVarCall;

    }

    /**
     * List Applicants
     * 
     * @param page The page to return. The first page is &#x60;page&#x3D;1&#x60; (optional, default to 1)
     * @param perPage The number of objects per page. (optional, default to 20)
     * @param includeDeleted Whether to also include applicants scheduled for deletion. (optional, default to false)
     * @return ApplicantsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicantsList listApplicants(Integer page, Integer perPage, Boolean includeDeleted) throws ApiException {
        ApiResponse<ApplicantsList> localVarResp = listApplicantsWithHttpInfo(page, perPage, includeDeleted);
        return localVarResp.getData();
    }

    /**
     * List Applicants
     * 
     * @param page The page to return. The first page is &#x60;page&#x3D;1&#x60; (optional, default to 1)
     * @param perPage The number of objects per page. (optional, default to 20)
     * @param includeDeleted Whether to also include applicants scheduled for deletion. (optional, default to false)
     * @return ApiResponse&lt;ApplicantsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicantsList> listApplicantsWithHttpInfo(Integer page, Integer perPage, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = listApplicantsValidateBeforeCall(page, perPage, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ApplicantsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Applicants (asynchronously)
     * 
     * @param page The page to return. The first page is &#x60;page&#x3D;1&#x60; (optional, default to 1)
     * @param perPage The number of objects per page. (optional, default to 20)
     * @param includeDeleted Whether to also include applicants scheduled for deletion. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listApplicantsAsync(Integer page, Integer perPage, Boolean includeDeleted, final ApiCallback<ApplicantsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicantsValidateBeforeCall(page, perPage, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ApplicantsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChecks
     * @param applicantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listChecksCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/checks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicant_id", applicantId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChecksValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling listChecks(Async)");
        }
        

        okhttp3.Call localVarCall = listChecksCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Checks
     * 
     * @param applicantId  (required)
     * @return ChecksList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChecksList listChecks(String applicantId) throws ApiException {
        ApiResponse<ChecksList> localVarResp = listChecksWithHttpInfo(applicantId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Checks
     * 
     * @param applicantId  (required)
     * @return ApiResponse&lt;ChecksList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChecksList> listChecksWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = listChecksValidateBeforeCall(applicantId, null);
        Type localVarReturnType = new TypeToken<ChecksList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Checks (asynchronously)
     * 
     * @param applicantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listChecksAsync(String applicantId, final ApiCallback<ChecksList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChecksValidateBeforeCall(applicantId, _callback);
        Type localVarReturnType = new TypeToken<ChecksList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDocuments
     * @param applicantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listDocumentsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicant_id", applicantId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling listDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = listDocumentsCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * List documents
     * All documents belonging to an applicant can be listed from this endpoint
     * @param applicantId  (required)
     * @return DocumentsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentsList listDocuments(String applicantId) throws ApiException {
        ApiResponse<DocumentsList> localVarResp = listDocumentsWithHttpInfo(applicantId);
        return localVarResp.getData();
    }

    /**
     * List documents
     * All documents belonging to an applicant can be listed from this endpoint
     * @param applicantId  (required)
     * @return ApiResponse&lt;DocumentsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentsList> listDocumentsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(applicantId, null);
        Type localVarReturnType = new TypeToken<DocumentsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List documents (asynchronously)
     * All documents belonging to an applicant can be listed from this endpoint
     * @param applicantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listDocumentsAsync(String applicantId, final ApiCallback<DocumentsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(applicantId, _callback);
        Type localVarReturnType = new TypeToken<DocumentsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLivePhotos
     * @param applicantId The id of the applicant the live photos belong to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLivePhotosCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_photos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicant_id", applicantId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLivePhotosValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling listLivePhotos(Async)");
        }
        

        okhttp3.Call localVarCall = listLivePhotosCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * List live photos
     * 
     * @param applicantId The id of the applicant the live photos belong to. (required)
     * @return LivePhotosList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LivePhotosList listLivePhotos(String applicantId) throws ApiException {
        ApiResponse<LivePhotosList> localVarResp = listLivePhotosWithHttpInfo(applicantId);
        return localVarResp.getData();
    }

    /**
     * List live photos
     * 
     * @param applicantId The id of the applicant the live photos belong to. (required)
     * @return ApiResponse&lt;LivePhotosList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LivePhotosList> listLivePhotosWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = listLivePhotosValidateBeforeCall(applicantId, null);
        Type localVarReturnType = new TypeToken<LivePhotosList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List live photos (asynchronously)
     * 
     * @param applicantId The id of the applicant the live photos belong to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLivePhotosAsync(String applicantId, final ApiCallback<LivePhotosList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLivePhotosValidateBeforeCall(applicantId, _callback);
        Type localVarReturnType = new TypeToken<LivePhotosList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLiveVideos
     * @param applicantId The id of the applicant the live videos belong to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLiveVideosCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicant_id", applicantId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLiveVideosValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling listLiveVideos(Async)");
        }
        

        okhttp3.Call localVarCall = listLiveVideosCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * List live videos
     * 
     * @param applicantId The id of the applicant the live videos belong to. (required)
     * @return LiveVideosList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveVideosList listLiveVideos(String applicantId) throws ApiException {
        ApiResponse<LiveVideosList> localVarResp = listLiveVideosWithHttpInfo(applicantId);
        return localVarResp.getData();
    }

    /**
     * List live videos
     * 
     * @param applicantId The id of the applicant the live videos belong to. (required)
     * @return ApiResponse&lt;LiveVideosList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveVideosList> listLiveVideosWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = listLiveVideosValidateBeforeCall(applicantId, null);
        Type localVarReturnType = new TypeToken<LiveVideosList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List live videos (asynchronously)
     * 
     * @param applicantId The id of the applicant the live videos belong to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLiveVideosAsync(String applicantId, final ApiCallback<LiveVideosList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLiveVideosValidateBeforeCall(applicantId, _callback);
        Type localVarReturnType = new TypeToken<LiveVideosList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listReports
     * @param checkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listReportsCall(String checkId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (checkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_id", checkId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReportsValidateBeforeCall(String checkId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling listReports(Async)");
        }
        

        okhttp3.Call localVarCall = listReportsCall(checkId, _callback);
        return localVarCall;

    }

    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     * 
     * @param checkId  (required)
     * @return ReportsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsList listReports(String checkId) throws ApiException {
        ApiResponse<ReportsList> localVarResp = listReportsWithHttpInfo(checkId);
        return localVarResp.getData();
    }

    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     * 
     * @param checkId  (required)
     * @return ApiResponse&lt;ReportsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsList> listReportsWithHttpInfo(String checkId) throws ApiException {
        okhttp3.Call localVarCall = listReportsValidateBeforeCall(checkId, null);
        Type localVarReturnType = new TypeToken<ReportsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All the reports belonging to a particular check can be listed from this endpoint. (asynchronously)
     * 
     * @param checkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listReportsAsync(String checkId, final ApiCallback<ReportsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReportsValidateBeforeCall(checkId, _callback);
        Type localVarReturnType = new TypeToken<ReportsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhooks
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listWebhooksCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhooksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listWebhooksCall(_callback);
        return localVarCall;

    }

    /**
     * List webhooks
     * 
     * @return WebhooksList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksList listWebhooks() throws ApiException {
        ApiResponse<WebhooksList> localVarResp = listWebhooksWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List webhooks
     * 
     * @return ApiResponse&lt;WebhooksList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksList> listWebhooksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhooksList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List webhooks (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listWebhooksAsync(final ApiCallback<WebhooksList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhooksList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreApplicant
     * @param applicantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call restoreApplicantCall(String applicantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/applicants/{applicant_id}/restore"
            .replaceAll("\\{" + "applicant_id" + "\\}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreApplicantValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling restoreApplicant(Async)");
        }
        

        okhttp3.Call localVarCall = restoreApplicantCall(applicantId, _callback);
        return localVarCall;

    }

    /**
     * Restore Applicant
     * 
     * @param applicantId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restoreApplicant(String applicantId) throws ApiException {
        restoreApplicantWithHttpInfo(applicantId);
    }

    /**
     * Restore Applicant
     * 
     * @param applicantId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restoreApplicantWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = restoreApplicantValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore Applicant (asynchronously)
     * 
     * @param applicantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call restoreApplicantAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreApplicantValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeCheck
     * @param checkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call resumeCheckCall(String checkId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/checks/{check_id}/resume"
            .replaceAll("\\{" + "check_id" + "\\}", localVarApiClient.escapeString(checkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeCheckValidateBeforeCall(String checkId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling resumeCheck(Async)");
        }
        

        okhttp3.Call localVarCall = resumeCheckCall(checkId, _callback);
        return localVarCall;

    }

    /**
     * Resume a Check
     * 
     * @param checkId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resumeCheck(String checkId) throws ApiException {
        resumeCheckWithHttpInfo(checkId);
    }

    /**
     * Resume a Check
     * 
     * @param checkId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resumeCheckWithHttpInfo(String checkId) throws ApiException {
        okhttp3.Call localVarCall = resumeCheckValidateBeforeCall(checkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resume a Check (asynchronously)
     * 
     * @param checkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call resumeCheckAsync(String checkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeCheckValidateBeforeCall(checkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeReport
     * @param reportId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call resumeReportCall(String reportId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/reports/{report_id}/resume"
            .replaceAll("\\{" + "report_id" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeReportValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling resumeReport(Async)");
        }
        

        okhttp3.Call localVarCall = resumeReportCall(reportId, _callback);
        return localVarCall;

    }

    /**
     * This endpoint is for resuming individual paused reports.
     * 
     * @param reportId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resumeReport(String reportId) throws ApiException {
        resumeReportWithHttpInfo(reportId);
    }

    /**
     * This endpoint is for resuming individual paused reports.
     * 
     * @param reportId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resumeReportWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = resumeReportValidateBeforeCall(reportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This endpoint is for resuming individual paused reports. (asynchronously)
     * 
     * @param reportId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call resumeReportAsync(String reportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeReportValidateBeforeCall(reportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApplicant
     * @param applicantId  (required)
     * @param applicant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateApplicantCall(String applicantId, Applicant applicant, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicant;

        // create path and map variables
        String localVarPath = "/applicants/{applicant_id}"
            .replaceAll("\\{" + "applicant_id" + "\\}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicantValidateBeforeCall(String applicantId, Applicant applicant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling updateApplicant(Async)");
        }
        
        // verify the required parameter 'applicant' is set
        if (applicant == null) {
            throw new ApiException("Missing the required parameter 'applicant' when calling updateApplicant(Async)");
        }
        

        okhttp3.Call localVarCall = updateApplicantCall(applicantId, applicant, _callback);
        return localVarCall;

    }

    /**
     * Update Applicant
     * Allows updating of an applicant’s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     * @param applicantId  (required)
     * @param applicant  (required)
     * @return Applicant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Applicant updateApplicant(String applicantId, Applicant applicant) throws ApiException {
        ApiResponse<Applicant> localVarResp = updateApplicantWithHttpInfo(applicantId, applicant);
        return localVarResp.getData();
    }

    /**
     * Update Applicant
     * Allows updating of an applicant’s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     * @param applicantId  (required)
     * @param applicant  (required)
     * @return ApiResponse&lt;Applicant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Applicant> updateApplicantWithHttpInfo(String applicantId, Applicant applicant) throws ApiException {
        okhttp3.Call localVarCall = updateApplicantValidateBeforeCall(applicantId, applicant, null);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Applicant (asynchronously)
     * Allows updating of an applicant’s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     * @param applicantId  (required)
     * @param applicant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateApplicantAsync(String applicantId, Applicant applicant, final ApiCallback<Applicant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicantValidateBeforeCall(applicantId, applicant, _callback);
        Type localVarReturnType = new TypeToken<Applicant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDocument
     * @param applicantId The ID of the applicant whose document is being uploaded. (required)
     * @param type The type of document. (required)
     * @param file The file to be uploaded. (required)
     * @param side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document. (optional)
     * @param issuingCountry The issuing country of the document, a 3-letter ISO code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call uploadDocumentCall(String applicantId, String type, File file, String side, String issuingCountry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (applicantId != null) {
            localVarFormParams.put("applicant_id", applicantId);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (side != null) {
            localVarFormParams.put("side", side);
        }

        if (issuingCountry != null) {
            localVarFormParams.put("issuing_country", issuingCountry);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDocumentValidateBeforeCall(String applicantId, String type, File file, String side, String issuingCountry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling uploadDocument(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling uploadDocument(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadDocument(Async)");
        }
        

        okhttp3.Call localVarCall = uploadDocumentCall(applicantId, type, file, side, issuingCountry, _callback);
        return localVarCall;

    }

    /**
     * Upload a document
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param applicantId The ID of the applicant whose document is being uploaded. (required)
     * @param type The type of document. (required)
     * @param file The file to be uploaded. (required)
     * @param side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document. (optional)
     * @param issuingCountry The issuing country of the document, a 3-letter ISO code. (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document uploadDocument(String applicantId, String type, File file, String side, String issuingCountry) throws ApiException {
        ApiResponse<Document> localVarResp = uploadDocumentWithHttpInfo(applicantId, type, file, side, issuingCountry);
        return localVarResp.getData();
    }

    /**
     * Upload a document
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param applicantId The ID of the applicant whose document is being uploaded. (required)
     * @param type The type of document. (required)
     * @param file The file to be uploaded. (required)
     * @param side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document. (optional)
     * @param issuingCountry The issuing country of the document, a 3-letter ISO code. (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> uploadDocumentWithHttpInfo(String applicantId, String type, File file, String side, String issuingCountry) throws ApiException {
        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(applicantId, type, file, side, issuingCountry, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a document (asynchronously)
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param applicantId The ID of the applicant whose document is being uploaded. (required)
     * @param type The type of document. (required)
     * @param file The file to be uploaded. (required)
     * @param side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document. (optional)
     * @param issuingCountry The issuing country of the document, a 3-letter ISO code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call uploadDocumentAsync(String applicantId, String type, File file, String side, String issuingCountry, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(applicantId, type, file, side, issuingCountry, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadLivePhoto
     * @param applicantId  (required)
     * @param file The file to be uploaded. (required)
     * @param advancedValidation Validates that the live photo contains exactly one face. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call uploadLivePhotoCall(String applicantId, File file, Boolean advancedValidation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/live_photos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (applicantId != null) {
            localVarFormParams.put("applicant_id", applicantId);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (advancedValidation != null) {
            localVarFormParams.put("advanced_validation", advancedValidation);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadLivePhotoValidateBeforeCall(String applicantId, File file, Boolean advancedValidation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling uploadLivePhoto(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadLivePhoto(Async)");
        }
        

        okhttp3.Call localVarCall = uploadLivePhotoCall(applicantId, file, advancedValidation, _callback);
        return localVarCall;

    }

    /**
     * Upload live photo
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     * @param applicantId  (required)
     * @param file The file to be uploaded. (required)
     * @param advancedValidation Validates that the live photo contains exactly one face. (optional, default to true)
     * @return LivePhoto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LivePhoto uploadLivePhoto(String applicantId, File file, Boolean advancedValidation) throws ApiException {
        ApiResponse<LivePhoto> localVarResp = uploadLivePhotoWithHttpInfo(applicantId, file, advancedValidation);
        return localVarResp.getData();
    }

    /**
     * Upload live photo
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     * @param applicantId  (required)
     * @param file The file to be uploaded. (required)
     * @param advancedValidation Validates that the live photo contains exactly one face. (optional, default to true)
     * @return ApiResponse&lt;LivePhoto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LivePhoto> uploadLivePhotoWithHttpInfo(String applicantId, File file, Boolean advancedValidation) throws ApiException {
        okhttp3.Call localVarCall = uploadLivePhotoValidateBeforeCall(applicantId, file, advancedValidation, null);
        Type localVarReturnType = new TypeToken<LivePhoto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload live photo (asynchronously)
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     * @param applicantId  (required)
     * @param file The file to be uploaded. (required)
     * @param advancedValidation Validates that the live photo contains exactly one face. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call uploadLivePhotoAsync(String applicantId, File file, Boolean advancedValidation, final ApiCallback<LivePhoto> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadLivePhotoValidateBeforeCall(applicantId, file, advancedValidation, _callback);
        Type localVarReturnType = new TypeToken<LivePhoto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
