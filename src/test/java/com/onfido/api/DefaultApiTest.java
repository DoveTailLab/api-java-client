/*
 * Onfido API
 * The Onfido API is used to submit check requests.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.api;

import com.onfido.ApiException;
import com.onfido.models.AddressesList;
import com.onfido.models.Applicant;
import com.onfido.models.ApplicantsList;
import com.onfido.models.Check;
import com.onfido.models.ChecksList;
import com.onfido.models.Document;
import com.onfido.models.DocumentsList;
import com.onfido.models.Error;
import java.io.File;
import com.onfido.models.LivePhoto;
import com.onfido.models.LivePhotosList;
import com.onfido.models.LiveVideo;
import com.onfido.models.LiveVideosList;
import com.onfido.models.Report;
import com.onfido.models.ReportsList;
import com.onfido.models.SdkToken;
import com.onfido.models.Webhook;
import com.onfido.models.WebhooksList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * This endpoint is for cancelling individual paused reports.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelReportTest() throws ApiException {
        String reportId = null;
        api.cancelReport(reportId);

        // TODO: test validations
    }
    
    /**
     * Create Applicant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApplicantTest() throws ApiException {
        Applicant applicant = null;
        Applicant response = api.createApplicant(applicant);

        // TODO: test validations
    }
    
    /**
     * Create a check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCheckTest() throws ApiException {
        Check check = null;
        Check response = api.createCheck(check);

        // TODO: test validations
    }
    
    /**
     * Create a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        Webhook webhook = null;
        Webhook response = api.createWebhook(webhook);

        // TODO: test validations
    }
    
    /**
     * Delete a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String webhookId = null;
        api.deleteWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * Delete Applicant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyApplicantTest() throws ApiException {
        String applicantId = null;
        api.destroyApplicant(applicantId);

        // TODO: test validations
    }
    
    /**
     * Download a documents raw data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        String documentId = null;
        File response = api.downloadDocument(documentId);

        // TODO: test validations
    }
    
    /**
     * Download live photo
     *
     * Live photos are downloaded using this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLivePhotoTest() throws ApiException {
        String livePhotoId = null;
        File response = api.downloadLivePhoto(livePhotoId);

        // TODO: test validations
    }
    
    /**
     * Download live video
     *
     * Live videos are downloaded using this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLiveVideoTest() throws ApiException {
        String liveVideoId = null;
        File response = api.downloadLiveVideo(liveVideoId);

        // TODO: test validations
    }
    
    /**
     * Edit a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editWebhookTest() throws ApiException {
        String webhookId = null;
        Webhook webhook = null;
        Webhook response = api.editWebhook(webhookId, webhook);

        // TODO: test validations
    }
    
    /**
     * Search for addresses by postcode
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAddressesTest() throws ApiException {
        String postcode = null;
        AddressesList response = api.findAddresses(postcode);

        // TODO: test validations
    }
    
    /**
     * Retrieve Applicant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findApplicantTest() throws ApiException {
        String applicantId = null;
        Applicant response = api.findApplicant(applicantId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findCheckTest() throws ApiException {
        String checkId = null;
        Check response = api.findCheck(checkId);

        // TODO: test validations
    }
    
    /**
     * A single document can be retrieved by calling this endpoint with the documentâ€™s unique identifier.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDocumentTest() throws ApiException {
        String documentId = null;
        Document response = api.findDocument(documentId);

        // TODO: test validations
    }
    
    /**
     * Retrieve live photo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findLivePhotoTest() throws ApiException {
        String livePhotoId = null;
        LivePhoto response = api.findLivePhoto(livePhotoId);

        // TODO: test validations
    }
    
    /**
     * Retrieve live video
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findLiveVideoTest() throws ApiException {
        String liveVideoId = null;
        LiveVideo response = api.findLiveVideo(liveVideoId);

        // TODO: test validations
    }
    
    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findReportTest() throws ApiException {
        String reportId = null;
        Report response = api.findReport(reportId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findWebhookTest() throws ApiException {
        String webhookId = null;
        Webhook response = api.findWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * Generate a SDK token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateSdkTokenTest() throws ApiException {
        SdkToken sdkToken = null;
        SdkToken response = api.generateSdkToken(sdkToken);

        // TODO: test validations
    }
    
    /**
     * List Applicants
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApplicantsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Boolean includeDeleted = null;
        ApplicantsList response = api.listApplicants(page, perPage, includeDeleted);

        // TODO: test validations
    }
    
    /**
     * Retrieve Checks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listChecksTest() throws ApiException {
        String applicantId = null;
        ChecksList response = api.listChecks(applicantId);

        // TODO: test validations
    }
    
    /**
     * List documents
     *
     * All documents belonging to an applicant can be listed from this endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDocumentsTest() throws ApiException {
        String applicantId = null;
        DocumentsList response = api.listDocuments(applicantId);

        // TODO: test validations
    }
    
    /**
     * List live photos
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLivePhotosTest() throws ApiException {
        String applicantId = null;
        LivePhotosList response = api.listLivePhotos(applicantId);

        // TODO: test validations
    }
    
    /**
     * List live videos
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLiveVideosTest() throws ApiException {
        String applicantId = null;
        LiveVideosList response = api.listLiveVideos(applicantId);

        // TODO: test validations
    }
    
    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listReportsTest() throws ApiException {
        String checkId = null;
        ReportsList response = api.listReports(checkId);

        // TODO: test validations
    }
    
    /**
     * List webhooks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWebhooksTest() throws ApiException {
        WebhooksList response = api.listWebhooks();

        // TODO: test validations
    }
    
    /**
     * Restore Applicant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreApplicantTest() throws ApiException {
        String applicantId = null;
        api.restoreApplicant(applicantId);

        // TODO: test validations
    }
    
    /**
     * Resume a Check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeCheckTest() throws ApiException {
        String checkId = null;
        api.resumeCheck(checkId);

        // TODO: test validations
    }
    
    /**
     * This endpoint is for resuming individual paused reports.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeReportTest() throws ApiException {
        String reportId = null;
        api.resumeReport(reportId);

        // TODO: test validations
    }
    
    /**
     * Update Applicant
     *
     * Allows updating of an applicantâ€™s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApplicantTest() throws ApiException {
        String applicantId = null;
        Applicant applicant = null;
        Applicant response = api.updateApplicant(applicantId, applicant);

        // TODO: test validations
    }
    
    /**
     * Upload a document
     *
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        String applicantId = null;
        String type = null;
        File file = null;
        String side = null;
        String issuingCountry = null;
        Document response = api.uploadDocument(applicantId, type, file, side, issuingCountry);

        // TODO: test validations
    }
    
    /**
     * Upload live photo
     *
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadLivePhotoTest() throws ApiException {
        String applicantId = null;
        File file = null;
        Boolean advancedValidation = null;
        LivePhoto response = api.uploadLivePhoto(applicantId, file, advancedValidation);

        // TODO: test validations
    }
    
}
